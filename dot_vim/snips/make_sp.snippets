# vim: fdm=marker tw=99 et
global !p
re_start_mk = r'^##K\s*\^?$'  # ##K ^

# Check if we are in a multiline-grading-comment.
def m():
    return (snip.buffer[snip.line].startswith('# ')
            and re.match(re_start_mk, snip.buffer[snip.line - 1]))

# Same as for the C-snippets, but with the suitable regex.
def var_mk(x_offset = 0):
	return var(x_offset, re_start_mk)
endglobal

# These snippets must include the '#' at the start of each line, as make does not support multiline
# comments.
# TODO Is there a better way to handle the '#' in the first line? :/
# General {{{
context "m()"
snippet all "all nicht erstes Target"
"all" muss das erste Target im Makefile sein (mit Ausnahme von ".PHONY"), da ein Aufruf von
# "make" in der Kommandozeile standardmaessig das erste Target erstellt. (-0.5)
endsnippet

context "m()"
snippet clean_rm_intermediate_objects "clean loescht nicht alle Zwischenprodukte"
Das "clean"-Target muss auch alle Zwischenprodukte (d.h. alle erzeugten .o-Dateien) loeschen.
# (-0.5)
endsnippet

context "m()"
snippet dependency "Abhaengigkeit fehlt"
"${1:`!p snip.rv = var_mk()`.h}" fehlt hier als Abhaengigkeit. Generell braucht man alle Dateien,
# die per include-Direktive mit Anfuehrungszeichen (z.B. "#include "$1"") in einer .c-Datei
# inkludiert werden, auch als Abhaengigkeit fuer die dazugehoerige .o-Datei im Makefile. (-0.5)
endsnippet

context "m()"
snippet dollar^ "$^"
Hier kann man auch "$^" verwenden, was zu allen Abhaengigkeiten expandiert. Dann spart man sich
# das Abtippen, und kann dort keine Leichtsinnsfehler mehr machen. ;)
endsnippet

context "m()"
snippet dollar@ "$@"
Hier kann man auch "$@" verwenden, was zum Namen des Targets expandiert. Das spart ein bisschen
# Tipparbeit. ;)
endsnippet

context "m()"
snippet flags "Compilerflags fehlen"
Beim Compilen muessen die Compileroptionen, die auf der Webseite angegeben sind, genutzt werden.
# (-0.5)
endsnippet

context "m()"
snippet intermediate_object_targets "keine Zwischenprodukte verwendet"
Laut Aufgabenstellung soll stets auf Zwischenprodukte zurueckgegriffen werden. Das bedeutet, dass
# eine .c-Datei zuerst in eine .o-Datei (Objektdatei) uebersetzt werden muss, bevor die Letztere
# dann zu dem ausfuehrbaren Programm gebunden wird. Siehe auch Foliensatz zur clash, 5.5. (-1.0)
endsnippet

context "m()"
snippet pattern "keine Pattern-Regeln"
Hier sollten (so weit moeglich) Pattern-Regeln verwendet werden, z.B. fuer "%.o: %.c".${1: (-1.0)}
endsnippet

context "m()"
snippet phony_missing ".PHONY fehlt"
Pseudo-Targets (= erzeugen keine Datei mit dem Namen des Targets) muessen als Abhaengigkeit des
# Spezial-Targets ".PHONY" angegeben werden, damit diese immer gebaut werden. In SP betrifft
# das die Targets "all" und "clean". (-0.5)
endsnippet

context "m()"
snippet phony_spelling ".PHONY falsch geschrieben"
Das muss exakt ".PHONY" geschrieben werden, sonst funktioniert das leider nicht. Testen kann man
# das z.B., indem man die Datei "clean" anlegt ("touch clean"), und danach versucht, "make clean"
# auszufuehren: "make: 'clean' is up to date.". (-0.5)
endsnippet

context "m()"
snippet precompiled_header "Precompiled Header werden erzeugt"
Hier steht der Header "${1:`!p snip.rv = var_mk()`.h}" im Compiler-Aufruf, wodurch ein sogenannter
# "precompiled Header" (namens "$1.gch") erzeugt wird. Das ist nicht direkt schlimm, aber bei
# kleinen Programmen wie in SP normalerweise unnoetig. Allerdings sollten diese Dateien dann beim
# "clean"-Target auch wieder geloescht werden, um vollstaendig sauberzumachen.
endsnippet

context "m()"
snippet rm_f "-f fehlt bei rm"
Beim Aufruf von "rm" sollte die Option "-f" verwendet werden. Das sorgt dafuer, dass kein Fehler
# auftritt, wenn eine der angegebenen Dateien nicht existiert (z.B. weil mehrmals hintereinander
# "make clean" aufgerufen wird).
endsnippet

context "m()"
snippet rm_multiple "mehrfache rm-Aufrufe"
rm(1) nimmt auch mehrere Argumente (d.h. Dateien) in einem Aufruf entgegen. ;)
endsnippet

context "m()"
snippet var_both "Compiler und -flags in einer Variable"
Normalerweise teilt man das auf: eine Variable "CC" fuer den Compiler, und eine Variable "CFLAGS"
# fuer die Compilerflags. Damit kann man z.B. leichter einen anderen Compiler von der Kommandozeile
# aus nutzen (z.B. mit "make CC=clang").
endsnippet

context "m()"
snippet var_name "Variable anders benannt"
Das nennt man per Konvention eigentlich "${1:CFLAGS}". ;)
endsnippet

context "m()"
snippet var_undefined_rR "undefinierte Variable benutzt (Fehler bei make -rR)"
"${1:`!p snip.rv = var_mk()`}" wird hier verwendet, aber nie definiert. Das funktioniert nur, da
# Make selbst normalerweise einige Variablen definiert (darunter eben auch "$1"). Allerdings muss
# das Makefile laut Aufgabenstellung auch ohne eingebaute Regeln funktionieren: "make -rR" soll
# keine Fehler erzeugen, was durch die fehlende Definition von "$1" nicht der Fall ist. (-0.5)
endsnippet

context "m()"
snippet var_use "Variable nicht verwendet"
Normal packt man ${2:das hier} in eine Variable namens "${1:CFLAGS}", damit man das nicht mehrmals
# tippen (bzw. copy-pasten) muss. ;)
endsnippet
# }}}

# halde {{{
context "m() and halde('')"
snippet halde_gnu "_GNU_SOURCE nicht definiert"
Das Flag -D_GNU_SOURCE statt -D_XOPEN_SOURCE=700 ist hier ausnahmsweise okay und sogar noetig. Das
# liegt daran, dass man in der halde einen Teil des POSIX-Interfaces implementiert, und das geht
# nicht aufbauend auf POSIX. Man benoetigt also das "MAP_ANONYMOUS"-Flag fuer mmap(2). Alternativen
# waeren: sbrk(2) (nur in POSIX-2001, nicht mehr in POSIX-2008), mmap(2) auf "/dev/zero" (gar nicht
# in POSIX), posix_typed_mem_open(3p) (nur in POSIX-2017), oder memfd_create (Linux-spezifisch).
endsnippet
# }}}

# The jbuffer-function for the "context" is found in the C-snippets.
# jbuffer {{{
context "m() and jbuffer()"
snippet jbuffer_header_dep_for_lib "Header ist Abhaengigkeit fuer Library"
Die Header braucht es hier nicht mehr als Abhaengigkeit, da die Informationen ja schon in der
# .o-Datei stecken. Dementsprechend hast du die Header auch als Abhaengigkeit bei den jeweiligen
# .o-Dateien (und dadurch ist dann letztendlich auch die Library von den Headern abhaengig, da die
# Abhaengigkeiten ja rekursiv aufgeloest werden - dafuer muessen die Header nicht nochmal extra
# angegeben werden).
endsnippet

context "m() and jbuffer()"
snippet jbuffer_L_missing "-L. fehlt beim Linken"
Hier muss noch angegeben werden, in welchem Pfad nach der Library (die mit "-l${1:jbuffer}"
# angegeben ist) gesucht werden soll. Dafuer braucht man das "-L" gefolgt vom Pfad; da die Library
# im aktuellen Ordner liegt, funktioniert also einfach "-L.". (-0.5)
endsnippet

context "m() and jbuffer()"
snippet jbuffer_object_dep_for_test "Objekt-Datei ist Abhaengigkeit fuer Test"
Die Objekt-Dateien braucht man hier nicht als Abhaengigkeiten, da die Informationen ja schon in
# der Bilbiothek stecken; man braucht die Abhaengigkeiten also nur beim Erzeugen der Bibliothek.
endsnippet

context "m() and jbuffer()"
snippet jbuffer_pic_missing "dynamische Bibliothek nicht PIC"
"Die beiden Module der dynamischen Bibliothek (und nur diese) sollen als Position-Independent
# Code uebersetzt werden": man muss hier also noch extra .o-Dateien erzeugen, welche mit "-fPIC"
# kompiliert wurden. (-1.0)
endsnippet

context "m() and jbuffer()"
snippet jbuffer_pic_unneeded "PIC unnoetigerweise verwendet"
Nachdem dieses Modul nicht Teil der Bibliothek ist, muss es auch nicht positionsunabhaengig sein.
# Das war auch in der Aufgabenstellung so gefordert: "Die beiden Module der dynamischen Bibliothek
# (und nur diese) sollen als Position-Independent Code uebersetzt werden". (-0.5)
endsnippet
# }}}
