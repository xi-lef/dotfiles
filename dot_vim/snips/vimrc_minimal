" Automatically install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'junegunn/vim-plug'
"Plug 'neoclide/coc.nvim', {'branch': 'release'} " fine for neovim, but not vim
Plug 'neoclide/coc.nvim', {'branch': 'fix/vim-onTextChange', 'do': 'npm ci'}
Plug 'xi-lef/coc-snippets', {'branch': 'sp', 'do': 'yarn install'}
call plug#end()

" not required but nice
" use (shift +) tab to go through CoC's suggestions, and enter to confirm one
inoremap <silent><expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : '<Tab>'
inoremap <silent><expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : ''
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#_select_confirm() : '<CR>'

" Inserts an SP-grading comment, with the arrow pointing to the position of the
" cursor
function SPComment(print_arrow = 1)
    if &filetype ==# 'c' || expand('%') ==# 'machfile'
        let start = '/*'
        let middle = ''
        let end = '*/'
    elseif &filetype ==# 'make'
        let start = '##'
        let middle = '# '
        let end = '#/'
    else
        echoerr 'Unrecognized filetype'
        return
    endif

    " the correct amount of spaces (depending on the cursor) follow by '^'
    let arrow = !a:print_arrow ? '' : repeat(' ', virtcol('.') - 4) . '^'
    " helper-'function' to clear a line
    let clear = "\<Esc>0\"_Di"

    execute 'normal! o' . clear . start . 'K' . arrow . "\<CR>"
                \ . clear . end . "\<Esc>O" . clear . middle
    startinsert!
endfunction

" \c inserts a comment with an arrow, \C without an arrow
nnoremap <silent> <Leader>c :call SPComment()<CR>
nnoremap <silent> <Leader>C :call SPComment(0)<CR>

" some general settings
syntax enable               " enable syntax highlighting
set number                  " show line numbers
